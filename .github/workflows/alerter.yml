name: alerter
on:
  schedule:
    - cron: "*/15 * * * *"
  workflow_dispatch:

jobs:
  check:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Restore previous state (if available)
        id: dl
        uses: dawidd6/action-download-artifact@v3
        with:
          workflow: alerter.yml
          branch: main
          name: state
          workflow_conclusion: success
          if_no_artifact_found: warn
          path: .

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          npm install

      - name: Build
        run: npm run build --if-present

      - name: Monitor packages and notify
        id: monitor
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          PACKAGES_TO_MONITOR: ${{ vars.PACKAGES_TO_MONITOR }}
          DISCORD_TITLE_TEMPLATE: ${{ vars.DISCORD_TITLE_TEMPLATE }}
          DISCORD_DESCRIPTION_TEMPLATE: ${{ vars.DISCORD_DESCRIPTION_TEMPLATE }}
          DISCORD_URL_TEMPLATE: ${{ vars.DISCORD_URL_TEMPLATE }}
          STATE_PATH: state.json
        run: |
          echo "should_upload=false" >> "$GITHUB_OUTPUT"
          # If an artifact was downloaded, it will contain state.json in the workspace
          if [ -f state.json ]; then echo "Found previous state.json"; else echo "No previous state"; fi
          # Write next state to a temp file to avoid truncating the previous state before the process reads it
          node dist/index.js > next_state.txt
          # Check if next_state.txt == "No updates detected."
          if [ "$(cat next_state.txt)" == "No updates detected." ]; then
            echo "No updates detected."
            exit 0
          fi
          # Check if next_state.txt is valid JSON
          if ! jq -e . next_state.txt >/dev/null 2>&1; then
            echo "next_state.txt is not valid JSON"
            exit 1
          fi
          echo "should_upload=true" >> "$GITHUB_OUTPUT"
          mv -f next_state.txt state.json

      - name: Show generated state
        if: ${{ steps.monitor.outputs.should_upload == 'true' }}
        run: |
          echo "state.json (exists?):" && test -f state.json && cat state.json || echo "state.json missing"

      - name: Upload state artifact
        if: ${{ steps.monitor.outputs.should_upload == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: state
          path: state.json
          if-no-files-found: ignore
          retention-days: 1
