name: npm â†’ Discord
on:
  schedule:
    - cron: "*/15 * * * *"
  workflow_dispatch:

jobs:
  check:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Ensure jq is installed
        run: |
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y
            sudo apt-get install -y jq
          fi

      - name: Monitor packages and notify
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          PACKAGES_TO_MONITOR: ${{ vars.PACKAGES_TO_MONITOR }}
        run: |
          set -euo pipefail
          mkdir -p .state
          changed=false

          if [ -z "${PACKAGES_TO_MONITOR:-}" ]; then
            echo "Repository variable PACKAGES_TO_MONITOR is not set."
            exit 1
          fi
          # Validate JSON
          echo "$PACKAGES_TO_MONITOR" | jq empty >/dev/null 2>&1 || { echo "PACKAGES_TO_MONITOR is not valid JSON"; exit 1; }

          while IFS= read -r entry; do
            pkg=$(echo "$entry" | base64 --decode | jq -r .key)
            tag=$(echo "$entry" | base64 --decode | jq -r .value)
            enc_pkg=$(jq -rn --arg s "$pkg" '$s|@uri')
            meta=$(curl -sSL "https://registry.npmjs.org/${enc_pkg}")
            # Resolve version from dist-tags first, then explicit version metadata
            ver=$(echo "$meta" | jq -r --arg t "$tag" '."dist-tags"[$t] // empty')
            if [ -z "$ver" ]; then
              ver=$(echo "$meta" | jq -r --arg t "$tag" '.versions[$t].version // empty')
            fi
            if [ -z "$ver" ]; then
              echo "Failed to resolve version for $pkg@$tag"
              continue
            fi

            safe_pkg=$(printf "%s" "$pkg" | sed 's/@/at-/g; s#/#__#g')
            state_file=".state/${safe_pkg}__${tag}.txt"
            last="none"
            if [ -f "$state_file" ]; then last=$(cat "$state_file"); fi

            if [ "$ver" != "$last" ]; then
              printf "%s" "$ver" > "$state_file"
              changed=true
              jq -n --arg ver "$ver" --arg pkg "$pkg" --arg tag "$tag" \
                '{embeds:[{title:"ðŸ“¦ \($pkg) (\($tag)) updated",description:"New version: **\($ver)**\n`npm i \($pkg)@\($ver)`",url:"https://www.npmjs.com/package/\($pkg)",timestamp: (now|todate)}]}' \
                | curl -sS -H "Content-Type: application/json" -d @- "$DISCORD_WEBHOOK_URL" >/dev/null
              echo "Notified for $pkg@$tag -> $ver"
            else
              echo "No change for $pkg@$tag (still $ver)"
            fi
          done < <(echo "$PACKAGES_TO_MONITOR" | jq -rc 'to_entries[] | @base64')

          if [ "$changed" = true ]; then
            git config user.name "github-actions"
            git config user.email "actions@users.noreply.github.com"
            git add .state/*.txt
            git commit -m "chore: update last seen versions [skip ci]" || true
            git push
          else
            echo "No changes to commit."
          fi
